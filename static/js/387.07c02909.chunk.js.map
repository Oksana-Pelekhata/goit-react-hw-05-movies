{"version":3,"file":"static/js/387.07c02909.chunk.js","mappings":"uQAAA,IAAMA,EAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,+NAIjBC,EAAM,+BAECC,EAAoB,WAC/B,OAAOC,MAAM,GAADC,OAAIH,EAAG,oCAAoCL,GACtDS,MAAK,SAAAC,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE7B,OAAOH,EAASI,MACpB,GAEF,EAEaC,EAAkB,SAACC,GAC9B,OAAOT,MAAM,GAADC,OAAIH,EAAG,wBAAAG,OAAuBQ,GAAShB,GAClDS,MAAK,SAAAC,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE7B,OAAOH,EAASI,MACpB,GACF,EAEaG,EAAkB,SAACC,GAC9B,OAAOX,MAAM,GAADC,OAAIH,EAAG,WAAAG,OAAUU,GAAMlB,GAClCS,MAAK,SAAAC,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE7B,OAAOH,EAASI,MACpB,GACF,EAEaK,EAAkB,SAACD,GAC9B,OAAOX,MAAM,GAADC,OAAIH,EAAG,WAAAG,OAAUU,EAAE,YAAYlB,GAC1CS,MAAK,SAAAC,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE7B,OAAOH,EAASI,MACpB,GACF,EAEaM,EAAiB,SAACF,GAC7B,OAAOX,MAAM,GAADC,OAAIH,EAAG,WAAAG,OAAUU,EAAE,YAAYlB,GAC1CS,MAAK,SAAAC,GACF,IAAKA,EAASC,GACV,MAAM,IAAIC,MAAMF,EAASG,QAE7B,OAAOH,EAASI,MACpB,GACF,C,6GCzDaO,E,OAAOC,GAAAA,GAASC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,6B,kBCoC7B,EAhCa,WACT,IAAAC,GAAwCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA7CI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GAEpCI,GAA0BL,EAAAA,EAAAA,UAAS,MAAKM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA1BE,GAAFD,EAAA,GAAUA,EAAA,IACdE,GAAYC,EAAAA,EAAAA,MAAZD,QAUV,OATEE,QAAQC,IAAI,UAAWH,IAEvBI,EAAAA,EAAAA,YAAU,YACNnB,EAAAA,EAAAA,IAAgBe,GACXzB,MAAK,SAAA8B,GAAA,IAAGC,EAAID,EAAJC,KAAI,OAAOV,EAAgBU,EAAK,IAC5CC,OAAM,SAAAC,GAAK,OAAIT,EAASS,EAAM,GAEnC,GAAG,CAACR,KAGFS,EAAAA,EAAAA,KAAA,OAAAC,UACID,EAAAA,EAAAA,KAACtB,EAAI,CAAAuB,SAEGf,GACAA,EAAagB,KAAI,SAACC,GAAE,OAChBC,EAAAA,EAAAA,MAAA,MAAAH,SAAA,EACID,EAAAA,EAAAA,KAAA,OAAKK,IAAG,mCAAAxC,OAAqCsC,EAAGG,cAAgBC,MAAM,QAAQC,IAAKL,EAAGM,iBACtFT,EAAAA,EAAAA,KAAA,KAAAC,SAAKE,EAAGM,iBACNT,EAAAA,EAAAA,KAAA,KAAAC,SAAIE,EAAGO,cAHJP,EAAGQ,UAIP,OAM3B,C","sources":["api/api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["const options = {\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJkZDZmMmViODRlZmMxMzljMTk5OGU5YmRmYzZlMTU2ZiIsInN1YiI6IjY0MzhlODZmYWI2ODQ5MDBiZDAxM2E2NCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.MX0hLc_etjm7AgFSwCGHbxJEsYMEfLi6jQCO-l5vNZc'\n    }\n}\n\nconst url = 'https://api.themoviedb.org/3'\n\nexport const getTrendingMovies = () => {\n  return fetch(`${url}/trending/all/day?language=en-US`, options)\n  .then(response => {\n      if (!response.ok) {\n          throw new Error(response.status);\n      }\n      return response.json();\n  })\n\n}\n\nexport const getMovieByTitle = (title) => {\n  return fetch(`${url}/search/movie?query=${title}`, options)\n  .then(response => {\n      if (!response.ok) {\n          throw new Error(response.status);\n      }\n      return response.json();\n  })\n}\n\nexport const getMovieDetails = (id) => {\n  return fetch(`${url}/movie/${id}`, options)\n  .then(response => {\n      if (!response.ok) {\n          throw new Error(response.status);\n      }\n      return response.json();\n  })\n}\n\nexport const getMovieCredits = (id) => {\n  return fetch(`${url}/movie/${id}/credits`, options)\n  .then(response => {\n      if (!response.ok) {\n          throw new Error(response.status);\n      }\n      return response.json();\n  })\n}\n\nexport const getMovieReview = (id) => {\n  return fetch(`${url}/movie/${id}/reviews`, options)\n  .then(response => {\n      if (!response.ok) {\n          throw new Error(response.status);\n      }\n      return response.json();\n  })\n}","import styled from 'styled-components';\n\nexport const List = styled.ul`\nlist-style: none;\n`","\nimport React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { List } from './Cast.styled'\nimport { getMovieCredits } from 'api/api'\n\nconst Cast = () => {\n    const [movieCredits, setMovieCredits] = useState([])\n    // eslint-disable-next-line no-unused-vars\n    const [error, setError] = useState(null)\n    const { movieId } = useParams()\n    console.log('movieId', movieId)\n\n    useEffect(() => {\n        getMovieCredits(movieId)\n            .then(({ cast }) => setMovieCredits(cast))\n        .catch(error => setError(error))\n        \n    }, [movieId])\n\n  return (\n      <div>\n          <List>\n              {\n                  movieCredits &&\n                  movieCredits.map((el) => \n                      <li key={el.credit_id}>\n                          <img src={`https://image.tmdb.org/t/p/w500/${el.profile_path}`} width='200px' alt={el.original_name} />\n                          <p>{ el.original_name}</p>\n                            <p>{el.character}</p>\n                      </li>\n                  )\n              }\n          </List>\n    </div>\n  )\n}\n\nexport default Cast"],"names":["options","method","headers","accept","Authorization","url","getTrendingMovies","fetch","concat","then","response","ok","Error","status","json","getMovieByTitle","title","getMovieDetails","id","getMovieCredits","getMovieReview","List","styled","_templateObject","_taggedTemplateLiteral","_useState","useState","_useState2","_slicedToArray","movieCredits","setMovieCredits","_useState3","_useState4","setError","movieId","useParams","console","log","useEffect","_ref","cast","catch","error","_jsx","children","map","el","_jsxs","src","profile_path","width","alt","original_name","character","credit_id"],"sourceRoot":""}